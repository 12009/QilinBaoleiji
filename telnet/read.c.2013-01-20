#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <pthread.h>
#include<termios.h>
#include<fcntl.h>
#include<string.h>
#include "/opt/freesvr/sql/include/mysql/mysql.h"
#define CONLINELENGTH 512
#define GLOBAL_CFG "/opt/freesvr/audit/etc/global.cfg"

struct timeval tv,tvpre,tvstart,tvend;
struct timezone tz;
int fd;
int start_time=0;
int strlength=0;
float rate=1;
int g_stop=0;
char * string;


fd_set rfds,rs;
struct timeval key_tv;

int i,r,q,j;
struct termios saveterm,nt;
int key_fd=0;
unsigned char c,buf[32];

char confLine[CONLINELENGTH] = {};
char context[CONLINELENGTH] ={};
FILE * fp;
char *locate = NULL;
char *pmove = NULL;
char *pline;
int itl;

char mysql_host[50];
char mysql_user[50];
char mysql_passwd[50];
char mysql_db[50];
char mysql_serv_port[50];

void my_exit()
{
    printf("\n\r<<Replay End>>\n\r");
    sleep(3);
    printf("\n\rpress ENTER to quit\n\r");
    getchar();
	tcsetattr(key_fd,TCSANOW,&saveterm);
	system("stty sane");
	exit(1);
}
void seek_replay(int time)
{
	start_time=time;
	if(time>tvend.tv_sec)
	{
		return;
	}
	printf("%c%c%c%c%c%c",0x1b,0x5b,0x48,0x1b,0x5b,0x4a);
	lseek(fd,0,SEEK_SET);
	if(start_time<tvstart.tv_sec)
	{
		return;
	}
}

void * keyread_thread_callback(void * arg)
{
	tcgetattr(key_fd,&saveterm);
	nt=saveterm;

	nt.c_lflag &= ~ECHO;
	nt.c_lflag &= ~ISIG;
	nt.c_lflag &= ~ICANON;

	tcsetattr(key_fd,TCSANOW,&nt);

	FD_ZERO(&rs);
	FD_SET(key_fd,&rs);
	key_tv.tv_sec=0;
	key_tv.tv_usec=0;

	i=0; q=0;
	while(1)
	{
		read(key_fd,buf+i,1);
		i++;
		if(i>31)
		{
		   write(1,"Too many data\n",14);
		   break;
		}
		r=select(key_fd+1,&rfds,NULL,NULL,&key_tv);
		if(r<0)
		{
		   write(1,"select() error.\n",16);
		   break;
		}
		if(r==1)
			continue;  
		rfds=rs;

		if(i==1)
		{
			if(buf[0]==48) //0
			{
		//		printf("0\n");
				lseek(fd,0,SEEK_SET);
			}
			else if(buf[0]==49) //1
			{
		//		printf("1\n");
				seek_replay(tvstart.tv_sec+(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==50) //2
			{
		//		printf("2\n");
				seek_replay(tvstart.tv_sec+2*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==51) //3
			{
		//		printf("3\n");
				seek_replay(tvstart.tv_sec+3*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==52) //4
			{
		//		printf("4\n");
				seek_replay(tvstart.tv_sec+4*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==53) //5
			{
		//		printf("5\n");
				seek_replay(tvstart.tv_sec+5*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==54) //6
			{
				printf("6\n");
		//		seek_replay(tvstart.tv_sec+6*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==56) //7
			{
		//		printf("7\n");
				seek_replay(tvstart.tv_sec+7*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==57) //8
			{
		//		printf("8\n");
				seek_replay(tvstart.tv_sec+8*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==58) //9
			{
				printf("9\n");
				seek_replay(tvstart.tv_sec+9*(tvend.tv_sec-tvstart.tv_sec)/10);
			}
			else if(buf[0]==32) //space
			{
		//		printf("space\n");
				if(g_stop==0)
				{
					g_stop=1;
				}
				else
				{
					g_stop=0;
				}
			}
		}
		else if(i==3)
		{
			if(buf[0]==27 && buf[1]==91 && buf[2]==65)  //up
			{
		//		printf("up\n");
				rate=rate*2;
			}
			else if(buf[0]==27 && buf[1]==91 && buf[2]==67)  //right
			{
		//		printf("right\n");
				seek_replay(tv.tv_sec+20);
			}
			else if(buf[0]==27 && buf[1]==91 && buf[2]==66)  //down
			{
		//		printf("down\n");
				rate=rate/2;
			}
			else if(buf[0]==27 && buf[1]==91 && buf[2]==68)  //left
			{
		//		printf("left\n");
				seek_replay(tv.tv_sec-20);
			}
		}
		i=0;
	}

	tcsetattr(key_fd,TCSANOW,&saveterm);
	printf("\n");

}

int main(int argc, char *argv[])
{
    if((fp = fopen(GLOBAL_CFG, "r")) == NULL)
    {
        printf("Open file : %s failed!!\n", GLOBAL_CFG);
        exit(-1);
    }   
    while(fgets(confLine, CONLINELENGTH, fp) != NULL)
    {
        pline = confLine;
        if(*pline == '#')
        {
            memset(confLine, 0, CONLINELENGTH);
            continue;
        }   
        while(isspace(*pline) != 0) pline++;
        locate = strchr(pline, '=');
        if(locate == NULL)
        {
            memset(confLine, 0, CONLINELENGTH);
            continue;
        }   
        pmove = locate;
        pmove--;
        while(isspace(*pmove) != 0)pmove--;
        itl = pmove - pline + 1; 
        
      if(itl == strlen("mysql-server") && strncasecmp(pline,"mysql-server",itl)==0)
      {
                locate++;
                while(isspace(*locate) != 0)locate++;
                pmove = locate;
                while(isspace(*pmove) == 0)pmove++;
                if(pmove-locate+1>0)
                {
                     strncpy(mysql_host, locate, pmove-locate);
                }
      }
      else if(itl == strlen("mysql-port") && strncasecmp(pline,"mysql-port",itl)==0)
      {
                locate++;
                while(isspace(*locate) != 0)locate++;
                pmove = locate;
                while(isspace(*pmove) == 0)pmove++;
                if(pmove-locate+1>0)
                {
                     strncpy(mysql_serv_port, locate, pmove-locate);
                }
      }
      else if(itl == strlen("mysql-user") && strncasecmp(pline,"mysql-user",itl)==0)
      {
                locate++;
                while(isspace(*locate) != 0)locate++;
                pmove = locate;
                while(isspace(*pmove) == 0)pmove++;
                if(pmove-locate+1>0)
                {
                     strncpy(mysql_user, locate, pmove-locate);
                }
      }
      else if(itl == strlen("mysql-pass") && strncasecmp(pline,"mysql-pass",itl)==0)
      {
                locate++;
                while(isspace(*locate) != 0)locate++;
                pmove = locate;
                while(isspace(*pmove) == 0)pmove++;
                if(pmove-locate+1>0)
                {
                     strncpy(mysql_passwd, locate, pmove-locate);
                }
      }
      else if(itl == strlen("mysql-db") && strncasecmp(pline,"mysql-db",itl)==0)
      {
                locate++;
                while(isspace(*locate) != 0)locate++;
                pmove = locate;
                while(isspace(*pmove) == 0)pmove++;
                if(pmove-locate+1>0)
                {
                     strncpy(mysql_db, locate, pmove-locate);
                }
      }
    }

    fclose(fp);

	fd = open(argv[1],O_RDONLY);

	if(argc==3)
	{
		start_time=atoi(argv[2]);
	}

	if(fd<0)
	{
		my_exit(1);
	}

	string=malloc(10000);
	bzero(string,10000);

    while(1)
    {
        if(read(fd,&tv,sizeof(tv))<sizeof(tv))
        {
			break;
        }

        if(read(fd,&strlength,sizeof(strlength))<sizeof(strlength))
        {
			break;
        }

        if(read(fd,string,strlength)<strlength)
        {
			break;
        }
        bzero(string,10000);
    }
	memcpy(&tvend,&tv,sizeof(tv));

	lseek(fd,0,SEEK_SET);
	if(read(fd,&tv,sizeof(tv))<sizeof(tv))
	{
		my_exit(1);
	}

	memcpy(&tvpre,&tv,sizeof(tv));
	memcpy(&tvstart,&tv,sizeof(tv));

	if(read(fd,&strlength,sizeof(strlength))<sizeof(strlength))
	{
		my_exit(1);
	}

	read(fd,string,strlength);
	if(tv.tv_sec>start_time)
	{
		write(1,string,strlength);

	}

    pthread_t thread;
    int ret = pthread_create(&thread,NULL,keyread_thread_callback,NULL);
    if(ret<0)
    {
        printf("auto error,will my_exit...\n");
        my_exit(0);
    }
	
	while(1)
	{
		while(g_stop==1)
		{
			sleep(1);
		}

		if(read(fd,&tv,sizeof(tv))<sizeof(tv))
		{
			my_exit(1);
		}

		if(read(fd,&strlength,sizeof(strlength))<sizeof(strlength))
		{
			my_exit(1);
		}
		
		if(read(fd,string,strlength)<strlength)
		{
//			printf("read3 err\n");
			my_exit(1);
		}

		if(tv.tv_sec<start_time)
		{
//			printf("continue2\n");
			memcpy(&tvpre,&tv,sizeof(tv));
			continue;
		}
		if(tv.tv_sec-tvpre.tv_sec>3)
		{
			sleep(3);
		}
		else if((1000000*(tv.tv_sec-tvpre.tv_sec)+(tv.tv_usec-tvpre.tv_usec))>0)
		{
		//	printf("usleep=%lf\n",(1000000*(tv.tv_sec-tvpre.tv_sec)+(tv.tv_usec-tvpre.tv_usec))/rate);
			usleep((1000000*(tv.tv_sec-tvpre.tv_sec)+(tv.tv_usec-tvpre.tv_usec))/rate);
		}
		write(1,string,strlength);
		bzero(string,10000);
		memcpy(&tvpre,&tv,sizeof(tv));
	}
	my_exit(1);
}
